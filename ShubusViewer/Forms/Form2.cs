using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
//using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace ShubusViewer
{
    public partial class Form2 : Form
    {
        private const string gameScript =
        "";

        public Form2()
        {
            InitializeComponent();

            byte[] encodedDataAsBytes = System.Convert.FromBase64String(gameScript);
            this.webBrowser1.DocumentText = System.Text.ASCIIEncoding.UTF8.GetString(encodedDataAsBytes);
        }
    }
}
